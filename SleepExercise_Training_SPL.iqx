
*******************************************************************************************************
*******************************************************************************************************
***********                                                                             ***************
***********   S L E E P    E X E R C I S E                                              ***************
***********                                                                             ***************
***********   																		    ***************
***********   based on: Rethinking Feelings: An fMRI Study of the                       ***************
***********   Cognitive Regulation of Emotion 											***************
***********   J Cogn Neurosci. 2002 Nov 15;14(8):1215-29.                               ***************
***********                                                                             ***************
***********  The journal describes a test which studies the brain                       ***************
***********  functions and activations to draw interferences about                      ***************
***********  the mechanisms supporting cognitive reappraisal. In                        ***************
***********  the test participants are shown images, autobiographical					***************
***********  texts as well as  with varyling levels of negativity (M). 					***************
***********	 This script attempts to re-enact the test in inquisit.	                    ***************
***********                                                                             ***************

last updated by Nandita Mangal
Copyright ©  2014,2015 Stanford University

*******************************************************************************************************
*******************************************************************************************************



*******************************************************************************************************************
*******************************************************************************************************************
INCLUDE: Common texts, shapes and images used across all training, lab and fmri scripts.
*******************************************************************************************************************
*******************************************************************************************************************

<include>
/file = "include/data_training_autobio_input.iqx"
/file = "include/images_shapes.iqx"
/file = "include/text_instructions.iqx"
/file = "include/sequences_settings.iqx"
</include>


*******************************************************************************************************************
*******************************************************************************************************************
DATA: this section contains data output file information
*******************************************************************************************************************
*******************************************************************************************************************

********************
raw data
********************
date, time, subject:			date and time script was run with the current subjectnumber 
blockcode, blocknum:			the name and number of the current block
trialcode, trialnum: 			the name and number of the currently recorded trial
trialcurrenttime,trialelapsedtime:			time trial was run and the elapsed time at end of trial
latency:						response latency during questions or stimulus frames time during trials	
picturename:					name of the image/stimuli in trial exercise
neglevel:					    the originally set value for an image's negative level
response1:						the participant's response (rate image response)


<data >
/ separatefiles = true
/ file = "SLEEP_session1_SPL_TRAINING_picture_pilot.iqdat"
/ columns = [date, time, subject,  blockcode, blocknum, trialcode, trialnum,  values.trialcurrenttime,  latency, values.response, , values.currentinstrtype;values.currentjitter,values.currentinterjitter]
</data>


********************
summary data
********************
script.startdate:				date script was run
script.starttime:				time script was started
script.subjectid:				subject id number
script.groupid:					group id number
script.elapsedtime:				time it took to run script (in ms)
/completed:						0 = script was not completed; 1 = script was completed (all conditions run)


<summarydata >
/ file = "SLEEP_session1_SPL_TRAINING_picture_summary_pilot.iqdat"
/columns = [script.startdate, script.currenttime, script.subjectid, script.groupid, script.elapsedtime, values.completed]
</summarydata>




**************************************************************************************************************
**************************************************************************************************************
TRIALS
**************************************************************************************************************
**************************************************************************************************************


#fixation cross : before each run
<trial preruncross>
/stimulusframes = [ 1= cross1,cross2]
/ontrialbegin = [values.trialcurrenttime = script.currenttime; values.negcounter=0;values.neucounter=0;values.trialcount=0; values.attcounter=0;values.refcounter=0 ;]
/trialduration = 4000
/showmousecursor = false
/ontrialend= [ values.trialelapsedtime = trial.preruncross.elapsedtime;values.scriptelaspedtime = script.elapsedtime]
</trial>1



#iti or jitter is chosen afer a user has rated an image i.e provided the response from negative pic or neutral pic trials. It's
duration is set to 3 seconds.
<trial iti>
/stimulusframes = [ 1=rectangle_black1;2=cross1,cross2]
/ontrialbegin = [ values.trialcurrenttime = script.currenttime;  values.currentjitter = 3 * 1000 ]
/timeout = values.currentjitter 
/ontrialend = [values.trialelapsedtime = trial.iti.elapsedtime; values.scriptelaspedtime = script.elapsedtime]
/showmousecursor = false
</trial>

#trial which shows a "REACT" instruction for 2 seconds and calls the picneutral trial.
<trial reactneutral>
/pretrialpause = 16.6666666667 * 3
/stimulusframes = [1=react;120=rectangle_black1;]
/ontrialbegin = [values.trialcurrenttime = script.currenttime; values.currentinterjitter = list.curentjitter2.nextvalue * 1000]
/timeout = 2000 + values.currentinterjitter + (16.6666666667 * 3 )
/ontrialend = [values.trialelapsedtime = trial.reactneutral.elapsedtime; values.scriptelaspedtime = script.elapsedtime]
/showmousecursor = false
/branch = [trial.picneutral]
</trial>

#trial which shows a "REACT" instruction and upon a SPACE response calls the picneutral_wait trial.
<trial reactneutral_wait>
/pretrialpause = 16.6666666667 * 3
/stimulusframes = [1=react]
/ontrialbegin = [values.trialcurrenttime = script.currenttime; ]
/ inputdevice= keyboard
/ validresponse = (" ")
/ontrialend = [values.trialelapsedtime = trial.reactneutral.elapsedtime; values.scriptelaspedtime = script.elapsedtime]
/showmousecursor = false
/branch = [trial.picneutral_wait]
</trial>

#trial which displays the neutral image for 10 seconds.
<trial picneutral>
/pretrialpause = 16.6666666667 * 3
/stimulusframes = [1=rectangle_green;2=neutrainspl]
/ontrialbegin = [values.trialcurrenttime = script.currenttime; ]
/timeout = 10000 +  (16.6666666667 * 3 )
/ontrialend = [values.trialelapsedtime = trial.picneutral.elapsedtime; values.scriptelaspedtime = script.elapsedtime]
/showmousecursor = false
</trial>

#trial which displays the neutral image untile a SPACe response is received.
<trial picneutral_wait>
/pretrialpause = 16.6666666667 * 3
/stimulusframes = [1=rectangle_green;2=neutrainspl]
/ontrialbegin = [values.trialcurrenttime = script.currenttime; ]
/ inputdevice= keyboard
/ validresponse = (" ")
/ontrialend = [values.trialelapsedtime = trial.picneutral.elapsedtime; values.scriptelaspedtime = script.elapsedtime]
/showmousecursor = false
</trial>

#trial which shows a "REACT" instruction for 2 seconds and calls the picnegative trial.
<trial reactnegative>
/pretrialpause = 16.666666666766666667 * 3
/stimulusframes = [1=react;120=rectangle_black1;]
/ontrialbegin = [values.trialcurrenttime = script.currenttime; values.currentinterjitter = list.curentjitter2.nextvalue * 1000]
/timeout = 2000 + values.currentinterjitter + (16.6666666667 * 3 )
/ontrialend = [values.trialelapsedtime = trial.reactnegative.elapsedtime; values.scriptelaspedtime = script.elapsedtime; values.currentinstrtype = "react"]
/showmousecursor = false
/branch = [trial.picnegative]
</trial>

#trial which shows a "REACT" instruction and upon a SPACE response calls the picnegative_wait trial.
<trial reactnegative_wait>
/pretrialpause = 16.666666666766666667 * 3
/stimulusframes = [1=react]
/ontrialbegin = [values.trialcurrenttime = script.currenttime; ]
/ inputdevice= keyboard
/ validresponse = (" ")
/ontrialend = [values.trialelapsedtime = trial.reactnegative.elapsedtime; values.scriptelaspedtime = script.elapsedtime; values.currentinstrtype = "react"]
/showmousecursor = false
/branch = [trial.picnegative_wait]
</trial>

#trial which shows a "REFRAME" instruction for 2 seconds and calls the picnegative trial.
<trial reframenegative>
/pretrialpause = 16.6666666667 * 3
/stimulusframes = [1=reframe;120=rectangle_black1;]
/ontrialbegin = [values.trialcurrenttime = script.currenttime; values.currentinterjitter = list.curentjitter2.nextvalue * 1000]
/timeout = 2000 + values.currentinterjitter + (16.6666666667 * 3 )
/ontrialend = [values.trialelapsedtime = trial.reframenegative.elapsedtime; values.scriptelaspedtime = script.elapsedtime; values.currentinstrtype = "reframe"]
/showmousecursor = false
/branch = [trial.picnegative]
</trial>

#trial which shows a "REFRAME" instruction untile a SPACE response is received.
<trial reframenegative_wait>
/pretrialpause = 16.6666666667 * 3
/stimulusframes = [1=reframe]
/ontrialbegin = [values.trialcurrenttime = script.currenttime; ]
/ inputdevice= keyboard
/ validresponse = (" ")
/ontrialend = [values.trialelapsedtime = trial.reframenegative.elapsedtime; values.scriptelaspedtime = script.elapsedtime; values.currentinstrtype = "reframe"]
/showmousecursor = false
/branch = [trial.picnegative_wait]
</trial>

#trial which shows a "REFRAME" instruction untile a SPACE response is received.
<trial reframenegative_wait_optional>
/pretrialpause = 16.6666666667 * 3
/stimulusframes = [1=reframe]
/ontrialbegin = [values.trialcurrenttime = script.currenttime; ]
/ inputdevice= keyboard
/ validresponse = (" ")
/ontrialend = [values.trialelapsedtime = trial.reframenegative.elapsedtime; values.scriptelaspedtime = script.elapsedtime; values.currentinstrtype = "reframe"]
/showmousecursor = false
/branch = [trial.picnegative_wait_optional]
</trial>

#trial which displays the negative image for 10 seconds.
<trial picnegative>
/pretrialpause = 16.6666666667 * 3
/stimulusframes = [2=negtrainspl;]
/ontrialbegin = [values.trialcurrenttime = script.currenttime; ]
/ontrialbegin = [ if (values.currentinstrtype == "reframe") trial.picnegative.insertstimulusframe(shape.rectangle_blue,1) ]
/ontrialbegin = [ if (values.currentinstrtype == "react") trial.picnegative.insertstimulusframe(shape.rectangle_green,1) ]
/timeout = 10000 +  (16.6666666667 * 3 )
/ontrialend = [values.trialelapsedtime = trial.picnegative.elapsedtime; values.scriptelaspedtime = script.elapsedtime]
/showmousecursor = false
</trial>

#trial which displays the negative image until a SPACE response is received.
<trial picnegative_wait>
/pretrialpause = 16.6666666667 * 3
/stimulusframes = [2=negtrainspl;]
/ontrialbegin = [values.trialcurrenttime = script.currenttime; ]
/ontrialbegin = [ if (values.currentinstrtype == "reframe") trial.picnegative_wait.insertstimulusframe(shape.rectangle_blue,1) ]
/ontrialbegin = [ if (values.currentinstrtype == "react") trial.picnegative_wait.insertstimulusframe(shape.rectangle_green,1) ]
/ inputdevice= keyboard
/ validresponse = (" ")
/ontrialend = [values.trialelapsedtime = trial.picnegative.elapsedtime; values.scriptelaspedtime = script.elapsedtime]
/showmousecursor = false
</trial>


#trial which displays the negative image (optional training) until a SPACE response is received.
<trial picnegative_wait_optional>
/pretrialpause = 16.6666666667 * 3
/stimulusframes = [2=negtrainsploptional;]
/ontrialbegin = [values.trialcurrenttime = script.currenttime; ]
/ontrialbegin = [ if (values.currentinstrtype == "reframe") trial.picnegative_wait.insertstimulusframe(shape.rectangle_blue,1) ]
/ontrialbegin = [ if (values.currentinstrtype == "react") trial.picnegative_wait.insertstimulusframe(shape.rectangle_green,1) ]
/ inputdevice= keyboard
/ validresponse = (" ")
/ontrialend = [values.trialelapsedtime = trial.picnegative.elapsedtime; values.scriptelaspedtime = script.elapsedtime]
/showmousecursor = false
</trial>

#trial allows user to rate with a time-limit of 4 seconds.
trial rateimage>
/ pretrialpause = 16.6666666667 * 2
/ stimulusframes = [1= scale_original]
/ ontrialbegin = [values.trialcurrenttime = script.currenttime]
/ beginresponsetime = 0
/ responsemode = free
/ responsemessage = ("1",scale_1,0)
/ responsemessage = ("2",scale_2,0)
/ responsemessage = ("3",scale_3,0)
/ responsemessage = ("4",scale_4,0)
/ responsemessage = ("5",scale_5,0)
/ inputdevice= keyboard
/ validresponse = ("1","2","3","4","5")
/ trialduration = 4000 + ( 16.6666666667 * 2)
/ ontrialend = [values.trialelapsedtime = trial.rateimage.elapsedtime; values.scriptelaspedtime = script.elapsedtime; values.response = trial.rateimage.response - 1 ; values.trialcount = values.trialcount + 1]
/ branch = [ if ( values.trialcount < 24 ) trial.iti]
/ showmousecursor = false
</trial>


<trial rateimage_practice>
/ pretrialpause = 16.6666666667 * 2
/ stimulusframes = [1= scale_original]
/ ontrialbegin = [values.trialcurrenttime = script.currenttime]
/ beginresponsetime = 0
/ responsemode = free
/ inputdevice= keyboard
/ validresponse = ("1","2","3","4","5")
/ monkeyresponse = ("1","2","3","4","5")
/ timeout = 4000 + ( 16.6666666667 * 2) 
/ ontrialend = [values.response = trial.rateimage_practice.response - 1 ; ]
/ showmousecursor = false
/ branch = [ if( values.response != -1) trial.rateimage_inputcorrectpractice]
</trial>


#trail which allows a user to rate the image.
<trial rateimage_inputcorrectpractice>
/ ontrialbegin = [values.trialcurrenttime = script.currenttime]
/ ontrialbegin = [ if (values.response == 1) trial.rateimage_inputcorrectpractice.insertstimulusframe(picture.scale_1,1)]
/ ontrialbegin = [ if (values.response == 2) trial.rateimage_inputcorrectpractice.insertstimulusframe(picture.scale_2,1)]
/ ontrialbegin = [ if (values.response == 3) trial.rateimage_inputcorrectpractice.insertstimulusframe(picture.scale_3,1)]
/ ontrialbegin = [ if (values.response == 4) trial.rateimage_inputcorrectpractice.insertstimulusframe(picture.scale_4,1)]
/ ontrialbegin = [ if (values.response == 5) trial.rateimage_inputcorrectpractice.insertstimulusframe(picture.scale_5,1)]
/ beginresponsetime = 0
/ responsemode = free
/ responsemessage = ("1",scale_1,0)
/ responsemessage = ("2",scale_2,0)
/ responsemessage = ("3",scale_3,0)
/ responsemessage = ("4",scale_4,0)
/ responsemessage = ("5",scale_5,0)
/ inputdevice= keyboard
/ validresponse = ("1","2","3","4","5")
/ monkeyresponse = ("1","2","3","4","5")
/ ontrialend = [ if(trial.rateimage_inputcorrectpractice.response !=0) values.response = trial.rateimage_inputcorrectpractice.response -1 ;]
/ trialduration = 4000 + ( 16.6666666667 * 2) - trial.rateimage_practice.latency ;
/ showmousecursor = false
</trial>

#trial allows user to rate with no time limit.
<trial rateimage_wait>
/ pretrialpause = 16.6666666667 * 2
/ stimulusframes = [1= scale_original]
/ ontrialbegin = [values.trialcurrenttime = script.currenttime]
/ responsemessage = ("1",scale_1,1500)
/ responsemessage = ("2",scale_2,1500)
/ responsemessage = ("3",scale_3,1500)
/ responsemessage = ("4",scale_4,1500)
/ responsemessage = ("5",scale_5,1500)
/ inputdevice= keyboard
/ validresponse = ("1","2","3","4","5")
/ ontrialend = [values.trialelapsedtime = trial.rateimage.elapsedtime; values.scriptelaspedtime = script.elapsedtime; values.response = trial.rateimage_wait.response - 1 ; ]
/ showmousecursor = false
</trial>


<trial rateimage>
/ pretrialpause = 16.6666666667 * 2
/ stimulusframes = [1= scale_original]
/ ontrialbegin = [values.trialcurrenttime = script.currenttime]
/ beginresponsetime = 0
/ responsemode = free
/ inputdevice= keyboard
/ validresponse = ("1","2","3","4","5")
/ monkeyresponse = ("1","2","3","4","5")
/ timeout = 4000 + ( 16.6666666667 * 2) 
/ ontrialend = [values.response = trial.rateimage.response - 1 ; values.trialcount = values.trialcount + 1]
/ showmousecursor = false
/ branch = [ if( values.response != -1) trial.rateimage_inputcorrect]
/ branch = [ if( values.response == -1 && values.trialcount < 24) trial.iti]
</trial>


#trail which allows a user to rate the image.
<trial rateimage_inputcorrect>
/ ontrialbegin = [values.trialcurrenttime = script.currenttime]
/ ontrialbegin = [ if (values.response == 1) trial.rateimage_inputcorrect.insertstimulusframe(picture.scale_1,1)]
/ ontrialbegin = [ if (values.response == 2) trial.rateimage_inputcorrect.insertstimulusframe(picture.scale_2,1)]
/ ontrialbegin = [ if (values.response == 3) trial.rateimage_inputcorrect.insertstimulusframe(picture.scale_3,1)]
/ ontrialbegin = [ if (values.response == 4) trial.rateimage_inputcorrect.insertstimulusframe(picture.scale_4,1)]
/ ontrialbegin = [ if (values.response == 5) trial.rateimage_inputcorrect.insertstimulusframe(picture.scale_5,1)]
/ beginresponsetime = 0
/ responsemode = free
/ responsemessage = ("1",scale_1,0)
/ responsemessage = ("2",scale_2,0)
/ responsemessage = ("3",scale_3,0)
/ responsemessage = ("4",scale_4,0)
/ responsemessage = ("5",scale_5,0)
/ inputdevice= keyboard
/ validresponse = ("1","2","3","4","5")
/ monkeyresponse = ("1","2","3","4","5")
/ ontrialend = [ if(trial.rateimage_inputcorrect.response !=0) values.response = trial.rateimage_inputcorrect.response -1 ;]
/ trialduration = 4000 + ( 16.6666666667 * 2) - trial.rateimage.latency ;
/ branch = [ if ( values.trialcount < 24 ) trial.iti]
/ showmousecursor = false
</trial>





<trial try_1>
/stimulusframes = [ 1 = trynegatives]
/ ontrialbegin = [values.trialcurrenttime = script.currenttime]
/inputdevice = keyboard
/validresponse = (" ", 28)
/showmousecursor = false
</trial>

#ready to start run screen. waits for space response to move on to the next trial
<trial welcomet>
/ stimulusframes = [1=welcome]
/ontrialbegin = [ values.trialcurrenttime = script.currenttime; ]
/ inputdevice= keyboard
/ validresponse = (" ")
/showmousecursor = false
/ ontrialend = [values.trialelapsedtime = trial.welcomet.elapsedtime;values.scriptelaspedtime = script.elapsedtime]
</trial>

#mid-training message.
<trial welcomet_1>
/ stimulusframes = [1=welcome_1]
/ontrialbegin = [ values.trialcurrenttime = script.currenttime; ]
/ inputdevice= keyboard
/ validresponse = (" ")
/showmousecursor = false
/ ontrialend = [values.trialelapsedtime = trial.welcomet.elapsedtime;values.scriptelaspedtime = script.elapsedtime]
</trial>

#mid-training message.
<trial welcomet_2>
/ stimulusframes = [1=welcome_2]
/ontrialbegin = [ values.trialcurrenttime = script.currenttime; ]
/ inputdevice= keyboard
/ validresponse = (" ")
/showmousecursor = false
/ ontrialend = [values.trialelapsedtime = trial.welcomet.elapsedtime;values.scriptelaspedtime = script.elapsedtime]
</trial>

#training reminder
<trial instructions1t>
/ stimulusframes = [ 1=instructions1]
/ontrialbegin = [ values.trialcurrenttime = script.currenttime; ]
/ inputdevice= keyboard
/ validresponse = (" ")
/showmousecursor = false
</trial>

#training reminder
<trial instructions2t>
/ stimulusframes = [1=react;2=instructions2]
/ontrialbegin = [ values.trialcurrenttime = script.currenttime; ]
/ inputdevice= keyboard
/ validresponse = (" ")
/showmousecursor = false
</trial>

#training reminder
<trial instructions3t>
/ stimulusframes = [1=reframe;2=instructions3]
/ontrialbegin = [ values.trialcurrenttime = script.currenttime; ]
/ inputdevice= keyboard
/ validresponse = (" ")
/showmousecursor = false
</trial>

#training reminder
<trial instructions4t>
/ stimulusframes = [1=instructions4]
/ontrialbegin = [ values.trialcurrenttime = script.currenttime; ]
/ inputdevice= keyboard
/ validresponse = (" ")
/showmousecursor = false
</trial>

#training reminder
<trial instructions5t>
/ stimulusframes = [1=instructions5]
/ontrialbegin = [ values.trialcurrenttime = script.currenttime; ]
/ inputdevice= keyboard
/ validresponse = (" ")
/showmousecursor = false
</trial>

#training reminder
<trial instructions6t>
/ stimulusframes = [1=autobio_text_react;2=instructions6]
/ontrialbegin = [ values.trialcurrenttime = script.currenttime; ]
/ inputdevice= keyboard
/ validresponse = (" ")
/showmousecursor = false
</trial>

#training reminder
<trial instructions7t>
/ stimulusframes = [1=autobio_text_react;2=instructions7]
/ontrialbegin = [ values.trialcurrenttime = script.currenttime; ]
/ inputdevice= keyboard
/ validresponse = (" ")
/showmousecursor = false
</trial>

#training reminder
<trial instructions8t>
/ stimulusframes = [1=autobio_text_reframe;2=instructions8]
/ontrialbegin = [ values.trialcurrenttime = script.currenttime; ]
/ inputdevice= keyboard
/ validresponse = (" ")
/showmousecursor = false
</trial>


#thanks for particpation in experiment screen
<trial thankst>
/ stimulusframes = [1=thanks]
/ontrialbegin = [ values.trialcurrenttime = script.currenttime; ]
/inputdevice = keyboard
/validresponse = (" ")
/showmousecursor = false
/ ontrialend = [values.trialelapsedtime = trial.thankst.elapsedtime;values.scriptelaspedtime = script.elapsedtime]
</trial>

#mid-training message.
<trial thankst_1>
/ stimulusframes = [1=thanks_1]
/ontrialbegin = [ values.trialcurrenttime = script.currenttime; ]
/inputdevice = keyboard
/validresponse = (" ")
/showmousecursor = false
/ ontrialend = [values.trialelapsedtime = trial.thankst.elapsedtime;values.scriptelaspedtime = script.elapsedtime]
/branch = [ trial.rateimage_practice]
</trial>


#end training message
<trial thanksp>
/ stimulusframes = [1=thankstraining]
/ontrialbegin = [ values.trialcurrenttime = script.currenttime; ]
/inputdevice = keyboard
/validresponse = (" ", 28)
/showmousecursor = false
/ ontrialend = [values.trialelapsedtime = trial.thankst.elapsedtime;values.scriptelaspedtime = script.elapsedtime]
</trial>


**************************************************************************************************************
**************************************************************************************************************
	BLOCKS
**************************************************************************************************************
**************************************************************************************************************

Train1 presents the stimuli in 3 parts for picture training. Re-run of training is allowed by user (press ENTER).

Part1: 
Waits for user to press space bar to move to the next screen and doesn't have rating scales.
It consists of 2 images.

Part2:
Consists of a rating scale. Waits for the user to press space bar to move to the next screen 
for images as well as the rating scale. It consists of 3 images.

Part3:
Simulates a regular experiment with 3 timed images and 3 timed rating scales.




<block Train1>
/trials = [ 1 = instructions1t ; 2 = instructions2t ; 3 = instructions3t; 4 = instructions4t;

5=welcomet_1; 
6= preruncross;

7 = reactnegative_wait;
9 = reframenegative_wait;
11 = reframenegative_wait;

8,10,12=rateimage_wait;

13 = thankst_1;

14 = welcomet_1;

15 = reactneutral_wait;
17 = reframenegative_wait;
19 = reactnegative_wait;
21 = reframenegative_wait;
23 = reframenegative_wait;

16, 18, 20, 22, 24= rateimage;
25 = try_1;

]
/onblockend = [ values.train_negatives = 0 ]

</block>

<block Train2>
/trials = [1,3=reframenegative_wait_optional; 2,4=rateimage]
</block>

<block Train3>
/ trials = [1=welcomet_2;

2 = reframenegative;
4 = reactnegative;
6 = reframenegative;
8 = reframenegative;
10 = reactneutral;
12 = reframenegative;

3,5,7,9,11,13 = rateimage;

14= thanksp;

]
</block>


<block thanksb>
/ trials = [1=thankst]
</block>



**************************************************************************************************************
**************************************************************************************************************
	EXPERIMENT
**************************************************************************************************************
**************************************************************************************************************
<expt trainexpt1>
/blocks = [ 1 = Train1]
/onexptend = [values.completed = 1]
</expt>


<expt trainexpt2>
/skip=[ trial.try_1.response == 57]
/blocks = [ 1 = Train2]
/onexptend = [values.completed = 1]
</expt>

<expt trainexpt3>
/blocks = [ 1 = Train3]
/onexptend = [values.completed = 1]
/branch = [ if ( trial.thanksp.response == 28 ) expt.trainexpt3]
</expt>



**************************************************************************************************************
**************************************************************************************************************
												End of Script
**************************************************************************************************************
**************************************************************************************************************